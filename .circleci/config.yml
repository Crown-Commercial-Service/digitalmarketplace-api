version: 2
references:
  venv_cache_key: &venv_cache_key
    key: venv-cache-{{ checksum "requirements.txt" }}-{{ checksum "requirements_for_test.txt" }}
  npm_cache_key: &npm_cache_key
    key: npm-cache-{{ checksum "package.json" }}
  cf_install: &cf_install
    run:
      name: Install Cloud Foundry CLI
      command: |
        curl -v -L -o cf-cli_amd64.deb 'https://cli.run.pivotal.io/stable?release=debian64&source=github'
        sudo dpkg -i cf-cli_amd64.deb
        cf install-plugin https://github.com/govau/autopilot/releases/download/0.0.5-venapp/autopilot-linux -f
        cf install-plugin https://github.com/govau/cf-run-and-wait/releases/download/0.2/run-and-wait.linux64 -f
        cf -v
  deploy_docker: &deploy_docker
    docker:
      - image: circleci/python:3.7.9-stretch
        environment:
          TZ: "/usr/share/zoneinfo/Australia/Sydney"
  update_libs: &update_libs
    run:
      name: Update Python dependency libraries
      command: |
        sudo apt update
        sudo apt purge -y libssl-dev
        sudo apt install -y libssl1.0-dev
  postgres_install: &postgres_install
    run:
      name: Installing PostgresSql
      command: |
        sudo apt install postgresql-9.6
        sudo service postgresql start
        sudo su - postgres -c "echo \"create user circleci with password 'circleci';\" | psql"
        sudo su - postgres -c "echo \"alter user circleci with superuser;\" | psql"
        sudo su - postgres -c "echo \"create database circleci;\" | psql"
  required_for_deploy: &required_for_deploy
    requires:
      - run_tests_app
      - run_tests_other
      - check_styles

jobs:
  check_styles:
    <<: *deploy_docker
    steps:
      - attach_workspace:
          at: .
      - run: 
          name: Check Styles
          command: |
            source venv/bin/activate
            pycodestyle app
            pycodestyle tests

  run_tests_app:
    <<: *deploy_docker
    steps:
      - attach_workspace:
          at: .
      - *update_libs
      - *postgres_install
      - run: 
          name: Run Tests (App)
          command: |
            source venv/bin/activate
            py.test tests/app --cov=app --cov-report term-missing --cov-report=html:test-results/api/app
      - store_artifacts:
          path: test-results

  run_tests_other:
    <<: *deploy_docker
    steps:
      - attach_workspace:
          at: .
      - *update_libs
      - *postgres_install
      - run: 
          name: Run Tests (Other)
          command: |
            source venv/bin/activate
            py.test --ignore=tests/app --cov=app --cov-report term-missing --cov-report=html:test-results/api/other
      - store_artifacts:
          path: test-results

  build:
    <<: *deploy_docker
    steps:
      - attach_workspace:
          at: .
      - checkout
      - restore_cache:
          <<: *venv_cache_key
      - run: 
          name: Pip Install
          command: |
            python -m venv venv
            source venv/bin/activate
            pip install -r requirements.txt
            pip uninstall -y pytest-sugar
      - save_cache:
          <<: *venv_cache_key
          paths:
            - venv
      - persist_to_workspace:
          root: .
          paths:
            - ~

  slack_approval:
    <<: *deploy_docker
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Slack about to go live
          command: |
            ./scripts/ci-notify-approval.sh

  deploy_to_rc:
    <<: *deploy_docker
    steps:
      - attach_workspace:
          at: .
      - *cf_install
      - *update_libs
      - *postgres_install
      - run:
          name: Deploy to RC
          command: |
            source venv/bin/activate
            cf login -a https://api.system.y.cld.gov.au -o dta -s marketplace -u $CF_USER_STAGING -p $CF_PASSWORD_STAGING
            python ./db_tasks.py v2_test_migration $CIRCLE_BUILD_NUM api.system.y.cld.gov.au $CF_USER_STAGING $CF_PASSWORD_STAGING marketplace-dm-rc-shared
            cf zero-downtime-push dm-rc-api -f manifest.rc.yml --show-app-log
            cf run-and-wait dm-rc-api "python ./db_tasks.py do_migration $CIRCLE_BUILD_NUM"
            cf zero-downtime-push dm-rc-celery -f manifest.celery.rc.yml --show-app-log

  deploy_to_alpha:
    <<: *deploy_docker
    steps:
      - attach_workspace:
          at: .
      - *cf_install
      - *update_libs
      - *postgres_install
      - run:
          name: Deploy to Alpha
          command: |
            source venv/bin/activate
            cf login -a https://api.system.y.cld.gov.au -o dta -s marketplace -u $CF_USER_STAGING -p $CF_PASSWORD_STAGING
            python ./db_tasks.py v2_test_migration $CIRCLE_BUILD_NUM api.system.y.cld.gov.au $CF_USER_STAGING $CF_PASSWORD_STAGING marketplace-dm-alpha-shared
            cf zero-downtime-push dm-alpha-api -f manifest.alpha.yml --show-app-log
            cf run-and-wait dm-alpha-api "python ./db_tasks.py do_migration $CIRCLE_BUILD_NUM"
            cf zero-downtime-push dm-alpha-celery -f manifest.celery.alpha.yml --show-app-log

  deploy_to_production_clone:
    <<: *deploy_docker
    steps:
      - attach_workspace:
          at: .
      - *cf_install
      - *update_libs
      - *postgres_install
      - run:
          name: Deploy to Production Clone
          command: |
            source venv/bin/activate
            cf login -a https://api.system.y.cld.gov.au -o dta -s marketplace -u $CF_USER_STAGING -p $CF_PASSWORD_STAGING
            python ./db_tasks.py v2_test_migration $CIRCLE_BUILD_NUM api.system.y.cld.gov.au $CF_USER_STAGING $CF_PASSWORD_STAGING marketplace-dm-pc-shared
            cf zero-downtime-push dm-pc-api -f manifest.pc.yml --show-app-log
            cf run-and-wait dm-pc-api "python ./db_tasks.py do_migration $CIRCLE_BUILD_NUM"
            cf zero-downtime-push dm-pc-celery -f manifest.celery.pc.yml --show-app-log

  deploy_to_staging:
    <<: *deploy_docker
    steps:
      - attach_workspace:
          at: .
      - *cf_install
      - *update_libs
      - *postgres_install
      - run:
          name: Deploy to Staging
          command: |
            source venv/bin/activate
            cf login -a https://api.system.y.cld.gov.au -o dta -s marketplace -u $CF_USER_STAGING -p $CF_PASSWORD_STAGING
            python ./db_tasks.py v2_test_migration $CIRCLE_BUILD_NUM api.system.y.cld.gov.au $CF_USER_STAGING $CF_PASSWORD_STAGING marketplace-dev-shared
            cf zero-downtime-push dm-dev-api -f manifest.yml --show-app-log
            cf run-and-wait dm-dev-api "python ./db_tasks.py do_migration $CIRCLE_BUILD_NUM"
            cf zero-downtime-push dm-dev-celery -f manifest.celery.yml --show-app-log

  deploy_to_production:
    <<: *deploy_docker
    steps:
      - attach_workspace:
          at: .
      - *cf_install
      - *update_libs
      - *postgres_install
      - run:
          name: Deploy to Production
          command: |
            source venv/bin/activate
            cf login -a https://api.system.b.cld.gov.au -o dta -s marketplace -u $CF_USER_PROD -p $CF_PASSWORD_PROD
            python ./db_tasks.py v2_test_migration $CIRCLE_BUILD_NUM api.system.b.cld.gov.au $CF_USER_PROD $CF_PASSWORD_PROD pgdb-96-prod
            cf zero-downtime-push dm-api -f manifest.production.yml --show-app-log
            cf run-and-wait dm-api "python ./db_tasks.py do_migration $CIRCLE_BUILD_NUM"
            cf zero-downtime-push dm-celery -f manifest.celery.production.yml --show-app-log
            ./scripts/ci-notify.sh


workflows:
  version: 2
  build_and_deploy:
    jobs:
      - build:
          filters:
            tags:
              only: /release-.*/
      - check_styles:
          requires:
            - build
          filters:
            tags:
              only: /release-.*/
      - run_tests_app:
          requires:
            - build
          filters:
            tags:
              only: /release-.*/
      - run_tests_other:
          requires:
            - build
          filters:
            tags:
              only: /release-.*/
      - deploy_to_rc:
          <<: *required_for_deploy
          filters:
            tags:
              ignore: /.*/
            branches:
              only: rc
      - deploy_to_alpha:
          <<: *required_for_deploy
          filters:
            tags:
              ignore: /.*/
            branches:
              only: alpha
      - deploy_to_staging:
          <<: *required_for_deploy
          filters:
            tags:
              ignore: /.*/
            branches:
              only: master
      - slack_approval:
          <<: *required_for_deploy
          filters:
            tags:
              only: /release-.*/
            branches:
              ignore: /.*/
      - approval:
          type: approval
          requires:
            - slack_approval
          filters:
            tags:
              only: /release-.*/
            branches:
              ignore: /.*/
      - deploy_to_production:
          requires:
            - approval
          filters:
            tags:
              only: /release-.*/
            branches:
              ignore: /.*/
      - deploy_to_production_clone:
          <<: *required_for_deploy
          filters:
            tags:
              ignore: /.*/
            branches:
              only: pc
